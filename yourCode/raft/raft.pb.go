// Code generated by protoc-gen-go. DO NOT EDIT.
// source: raft.proto

package raft

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Role int32

const (
	Role_Follower  Role = 0
	Role_Candidate Role = 1
	Role_Leader    Role = 2
)

var Role_name = map[int32]string{
	0: "Follower",
	1: "Candidate",
	2: "Leader",
}

var Role_value = map[string]int32{
	"Follower":  0,
	"Candidate": 1,
	"Leader":    2,
}

func (x Role) String() string {
	return proto.EnumName(Role_name, int32(x))
}

func (Role) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{0}
}

type Operation int32

const (
	Operation_Put    Operation = 0
	Operation_Delete Operation = 1
)

var Operation_name = map[int32]string{
	0: "Put",
	1: "Delete",
}

var Operation_value = map[string]int32{
	"Put":    0,
	"Delete": 1,
}

func (x Operation) String() string {
	return proto.EnumName(Operation_name, int32(x))
}

func (Operation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{1}
}

type Status int32

const (
	Status_OK          Status = 0
	Status_KeyFound    Status = 1
	Status_KeyNotFound Status = 2
	Status_WrongNode   Status = 3
)

var Status_name = map[int32]string{
	0: "OK",
	1: "KeyFound",
	2: "KeyNotFound",
	3: "WrongNode",
}

var Status_value = map[string]int32{
	"OK":          0,
	"KeyFound":    1,
	"KeyNotFound": 2,
	"WrongNode":   3,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{2}
}

type MsgName int32

const (
	MsgName_RequestVote   MsgName = 0
	MsgName_AppendEntries MsgName = 1
)

var MsgName_name = map[int32]string{
	0: "RequestVote",
	1: "AppendEntries",
}

var MsgName_value = map[string]int32{
	"RequestVote":   0,
	"AppendEntries": 1,
}

func (x MsgName) String() string {
	return proto.EnumName(MsgName_name, int32(x))
}

func (MsgName) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{3}
}

type CheckEventsArgs struct {
	RequestVoteSchema    map[string]int32 `protobuf:"bytes,1,rep,name=RequestVoteSchema,proto3" json:"RequestVoteSchema,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	AppendEntriesSchema  map[string]int32 `protobuf:"bytes,2,rep,name=AppendEntriesSchema,proto3" json:"AppendEntriesSchema,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ExpectedEvents       []*Event         `protobuf:"bytes,3,rep,name=ExpectedEvents,proto3" json:"ExpectedEvents,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CheckEventsArgs) Reset()         { *m = CheckEventsArgs{} }
func (m *CheckEventsArgs) String() string { return proto.CompactTextString(m) }
func (*CheckEventsArgs) ProtoMessage()    {}
func (*CheckEventsArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{0}
}

func (m *CheckEventsArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckEventsArgs.Unmarshal(m, b)
}
func (m *CheckEventsArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckEventsArgs.Marshal(b, m, deterministic)
}
func (m *CheckEventsArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckEventsArgs.Merge(m, src)
}
func (m *CheckEventsArgs) XXX_Size() int {
	return xxx_messageInfo_CheckEventsArgs.Size(m)
}
func (m *CheckEventsArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckEventsArgs.DiscardUnknown(m)
}

var xxx_messageInfo_CheckEventsArgs proto.InternalMessageInfo

func (m *CheckEventsArgs) GetRequestVoteSchema() map[string]int32 {
	if m != nil {
		return m.RequestVoteSchema
	}
	return nil
}

func (m *CheckEventsArgs) GetAppendEntriesSchema() map[string]int32 {
	if m != nil {
		return m.AppendEntriesSchema
	}
	return nil
}

func (m *CheckEventsArgs) GetExpectedEvents() []*Event {
	if m != nil {
		return m.ExpectedEvents
	}
	return nil
}

type CheckEventsReply struct {
	Success              bool     `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	ErrMsg               string   `protobuf:"bytes,2,opt,name=ErrMsg,proto3" json:"ErrMsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckEventsReply) Reset()         { *m = CheckEventsReply{} }
func (m *CheckEventsReply) String() string { return proto.CompactTextString(m) }
func (*CheckEventsReply) ProtoMessage()    {}
func (*CheckEventsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{1}
}

func (m *CheckEventsReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckEventsReply.Unmarshal(m, b)
}
func (m *CheckEventsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckEventsReply.Marshal(b, m, deterministic)
}
func (m *CheckEventsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckEventsReply.Merge(m, src)
}
func (m *CheckEventsReply) XXX_Size() int {
	return xxx_messageInfo_CheckEventsReply.Size(m)
}
func (m *CheckEventsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckEventsReply.DiscardUnknown(m)
}

var xxx_messageInfo_CheckEventsReply proto.InternalMessageInfo

func (m *CheckEventsReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *CheckEventsReply) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type ProposeArgs struct {
	Op                   Operation `protobuf:"varint,1,opt,name=Op,proto3,enum=raft.Operation" json:"Op,omitempty"`
	Key                  string    `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	V                    int32     `protobuf:"varint,3,opt,name=V,proto3" json:"V,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ProposeArgs) Reset()         { *m = ProposeArgs{} }
func (m *ProposeArgs) String() string { return proto.CompactTextString(m) }
func (*ProposeArgs) ProtoMessage()    {}
func (*ProposeArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{2}
}

func (m *ProposeArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProposeArgs.Unmarshal(m, b)
}
func (m *ProposeArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProposeArgs.Marshal(b, m, deterministic)
}
func (m *ProposeArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposeArgs.Merge(m, src)
}
func (m *ProposeArgs) XXX_Size() int {
	return xxx_messageInfo_ProposeArgs.Size(m)
}
func (m *ProposeArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposeArgs.DiscardUnknown(m)
}

var xxx_messageInfo_ProposeArgs proto.InternalMessageInfo

func (m *ProposeArgs) GetOp() Operation {
	if m != nil {
		return m.Op
	}
	return Operation_Put
}

func (m *ProposeArgs) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ProposeArgs) GetV() int32 {
	if m != nil {
		return m.V
	}
	return 0
}

type ProposeReply struct {
	CurrentLeader        int32    `protobuf:"varint,1,opt,name=CurrentLeader,proto3" json:"CurrentLeader,omitempty"`
	Status               Status   `protobuf:"varint,2,opt,name=Status,proto3,enum=raft.Status" json:"Status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProposeReply) Reset()         { *m = ProposeReply{} }
func (m *ProposeReply) String() string { return proto.CompactTextString(m) }
func (*ProposeReply) ProtoMessage()    {}
func (*ProposeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{3}
}

func (m *ProposeReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProposeReply.Unmarshal(m, b)
}
func (m *ProposeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProposeReply.Marshal(b, m, deterministic)
}
func (m *ProposeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposeReply.Merge(m, src)
}
func (m *ProposeReply) XXX_Size() int {
	return xxx_messageInfo_ProposeReply.Size(m)
}
func (m *ProposeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposeReply.DiscardUnknown(m)
}

var xxx_messageInfo_ProposeReply proto.InternalMessageInfo

func (m *ProposeReply) GetCurrentLeader() int32 {
	if m != nil {
		return m.CurrentLeader
	}
	return 0
}

func (m *ProposeReply) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_OK
}

type GetValueArgs struct {
	Key                  string   `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetValueArgs) Reset()         { *m = GetValueArgs{} }
func (m *GetValueArgs) String() string { return proto.CompactTextString(m) }
func (*GetValueArgs) ProtoMessage()    {}
func (*GetValueArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{4}
}

func (m *GetValueArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetValueArgs.Unmarshal(m, b)
}
func (m *GetValueArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetValueArgs.Marshal(b, m, deterministic)
}
func (m *GetValueArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetValueArgs.Merge(m, src)
}
func (m *GetValueArgs) XXX_Size() int {
	return xxx_messageInfo_GetValueArgs.Size(m)
}
func (m *GetValueArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_GetValueArgs.DiscardUnknown(m)
}

var xxx_messageInfo_GetValueArgs proto.InternalMessageInfo

func (m *GetValueArgs) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type GetValueReply struct {
	V                    int32    `protobuf:"varint,1,opt,name=V,proto3" json:"V,omitempty"`
	Status               Status   `protobuf:"varint,2,opt,name=Status,proto3,enum=raft.Status" json:"Status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetValueReply) Reset()         { *m = GetValueReply{} }
func (m *GetValueReply) String() string { return proto.CompactTextString(m) }
func (*GetValueReply) ProtoMessage()    {}
func (*GetValueReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{5}
}

func (m *GetValueReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetValueReply.Unmarshal(m, b)
}
func (m *GetValueReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetValueReply.Marshal(b, m, deterministic)
}
func (m *GetValueReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetValueReply.Merge(m, src)
}
func (m *GetValueReply) XXX_Size() int {
	return xxx_messageInfo_GetValueReply.Size(m)
}
func (m *GetValueReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetValueReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetValueReply proto.InternalMessageInfo

func (m *GetValueReply) GetV() int32 {
	if m != nil {
		return m.V
	}
	return 0
}

func (m *GetValueReply) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_OK
}

type LogEntry struct {
	Term                 int32     `protobuf:"varint,1,opt,name=Term,proto3" json:"Term,omitempty"`
	Op                   Operation `protobuf:"varint,2,opt,name=Op,proto3,enum=raft.Operation" json:"Op,omitempty"`
	Key                  string    `protobuf:"bytes,3,opt,name=Key,proto3" json:"Key,omitempty"`
	Value                int32     `protobuf:"varint,4,opt,name=Value,proto3" json:"Value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *LogEntry) Reset()         { *m = LogEntry{} }
func (m *LogEntry) String() string { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()    {}
func (*LogEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{6}
}

func (m *LogEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogEntry.Unmarshal(m, b)
}
func (m *LogEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogEntry.Marshal(b, m, deterministic)
}
func (m *LogEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogEntry.Merge(m, src)
}
func (m *LogEntry) XXX_Size() int {
	return xxx_messageInfo_LogEntry.Size(m)
}
func (m *LogEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_LogEntry.DiscardUnknown(m)
}

var xxx_messageInfo_LogEntry proto.InternalMessageInfo

func (m *LogEntry) GetTerm() int32 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *LogEntry) GetOp() Operation {
	if m != nil {
		return m.Op
	}
	return Operation_Put
}

func (m *LogEntry) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *LogEntry) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type RequestVoteArgs struct {
	From                 int32    `protobuf:"varint,1,opt,name=From,proto3" json:"From,omitempty"`
	To                   int32    `protobuf:"varint,2,opt,name=To,proto3" json:"To,omitempty"`
	Term                 int32    `protobuf:"varint,3,opt,name=Term,proto3" json:"Term,omitempty"`
	CandidateId          int32    `protobuf:"varint,4,opt,name=CandidateId,proto3" json:"CandidateId,omitempty"`
	LastLogIndex         int32    `protobuf:"varint,5,opt,name=LastLogIndex,proto3" json:"LastLogIndex,omitempty"`
	LastLogTerm          int32    `protobuf:"varint,6,opt,name=LastLogTerm,proto3" json:"LastLogTerm,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestVoteArgs) Reset()         { *m = RequestVoteArgs{} }
func (m *RequestVoteArgs) String() string { return proto.CompactTextString(m) }
func (*RequestVoteArgs) ProtoMessage()    {}
func (*RequestVoteArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{7}
}

func (m *RequestVoteArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestVoteArgs.Unmarshal(m, b)
}
func (m *RequestVoteArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestVoteArgs.Marshal(b, m, deterministic)
}
func (m *RequestVoteArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestVoteArgs.Merge(m, src)
}
func (m *RequestVoteArgs) XXX_Size() int {
	return xxx_messageInfo_RequestVoteArgs.Size(m)
}
func (m *RequestVoteArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestVoteArgs.DiscardUnknown(m)
}

var xxx_messageInfo_RequestVoteArgs proto.InternalMessageInfo

func (m *RequestVoteArgs) GetFrom() int32 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *RequestVoteArgs) GetTo() int32 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *RequestVoteArgs) GetTerm() int32 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVoteArgs) GetCandidateId() int32 {
	if m != nil {
		return m.CandidateId
	}
	return 0
}

func (m *RequestVoteArgs) GetLastLogIndex() int32 {
	if m != nil {
		return m.LastLogIndex
	}
	return 0
}

func (m *RequestVoteArgs) GetLastLogTerm() int32 {
	if m != nil {
		return m.LastLogTerm
	}
	return 0
}

type RequestVoteReply struct {
	From                 int32    `protobuf:"varint,1,opt,name=From,proto3" json:"From,omitempty"`
	To                   int32    `protobuf:"varint,2,opt,name=To,proto3" json:"To,omitempty"`
	Term                 int32    `protobuf:"varint,3,opt,name=Term,proto3" json:"Term,omitempty"`
	VoteGranted          bool     `protobuf:"varint,4,opt,name=VoteGranted,proto3" json:"VoteGranted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestVoteReply) Reset()         { *m = RequestVoteReply{} }
func (m *RequestVoteReply) String() string { return proto.CompactTextString(m) }
func (*RequestVoteReply) ProtoMessage()    {}
func (*RequestVoteReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{8}
}

func (m *RequestVoteReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestVoteReply.Unmarshal(m, b)
}
func (m *RequestVoteReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestVoteReply.Marshal(b, m, deterministic)
}
func (m *RequestVoteReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestVoteReply.Merge(m, src)
}
func (m *RequestVoteReply) XXX_Size() int {
	return xxx_messageInfo_RequestVoteReply.Size(m)
}
func (m *RequestVoteReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestVoteReply.DiscardUnknown(m)
}

var xxx_messageInfo_RequestVoteReply proto.InternalMessageInfo

func (m *RequestVoteReply) GetFrom() int32 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *RequestVoteReply) GetTo() int32 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *RequestVoteReply) GetTerm() int32 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVoteReply) GetVoteGranted() bool {
	if m != nil {
		return m.VoteGranted
	}
	return false
}

type AppendEntriesArgs struct {
	From                 int32       `protobuf:"varint,1,opt,name=From,proto3" json:"From,omitempty"`
	To                   int32       `protobuf:"varint,2,opt,name=To,proto3" json:"To,omitempty"`
	Term                 int32       `protobuf:"varint,3,opt,name=Term,proto3" json:"Term,omitempty"`
	LeaderId             int32       `protobuf:"varint,4,opt,name=LeaderId,proto3" json:"LeaderId,omitempty"`
	PrevLogIndex         int32       `protobuf:"varint,5,opt,name=PrevLogIndex,proto3" json:"PrevLogIndex,omitempty"`
	PrevLogTerm          int32       `protobuf:"varint,6,opt,name=PrevLogTerm,proto3" json:"PrevLogTerm,omitempty"`
	Entries              []*LogEntry `protobuf:"bytes,7,rep,name=Entries,proto3" json:"Entries,omitempty"`
	LeaderCommit         int32       `protobuf:"varint,8,opt,name=LeaderCommit,proto3" json:"LeaderCommit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *AppendEntriesArgs) Reset()         { *m = AppendEntriesArgs{} }
func (m *AppendEntriesArgs) String() string { return proto.CompactTextString(m) }
func (*AppendEntriesArgs) ProtoMessage()    {}
func (*AppendEntriesArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{9}
}

func (m *AppendEntriesArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppendEntriesArgs.Unmarshal(m, b)
}
func (m *AppendEntriesArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppendEntriesArgs.Marshal(b, m, deterministic)
}
func (m *AppendEntriesArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendEntriesArgs.Merge(m, src)
}
func (m *AppendEntriesArgs) XXX_Size() int {
	return xxx_messageInfo_AppendEntriesArgs.Size(m)
}
func (m *AppendEntriesArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendEntriesArgs.DiscardUnknown(m)
}

var xxx_messageInfo_AppendEntriesArgs proto.InternalMessageInfo

func (m *AppendEntriesArgs) GetFrom() int32 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *AppendEntriesArgs) GetTo() int32 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *AppendEntriesArgs) GetTerm() int32 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesArgs) GetLeaderId() int32 {
	if m != nil {
		return m.LeaderId
	}
	return 0
}

func (m *AppendEntriesArgs) GetPrevLogIndex() int32 {
	if m != nil {
		return m.PrevLogIndex
	}
	return 0
}

func (m *AppendEntriesArgs) GetPrevLogTerm() int32 {
	if m != nil {
		return m.PrevLogTerm
	}
	return 0
}

func (m *AppendEntriesArgs) GetEntries() []*LogEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *AppendEntriesArgs) GetLeaderCommit() int32 {
	if m != nil {
		return m.LeaderCommit
	}
	return 0
}

type AppendEntriesReply struct {
	From                 int32    `protobuf:"varint,1,opt,name=From,proto3" json:"From,omitempty"`
	To                   int32    `protobuf:"varint,2,opt,name=To,proto3" json:"To,omitempty"`
	Term                 int32    `protobuf:"varint,3,opt,name=Term,proto3" json:"Term,omitempty"`
	Success              bool     `protobuf:"varint,4,opt,name=Success,proto3" json:"Success,omitempty"`
	MatchIndex           int32    `protobuf:"varint,5,opt,name=MatchIndex,proto3" json:"MatchIndex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppendEntriesReply) Reset()         { *m = AppendEntriesReply{} }
func (m *AppendEntriesReply) String() string { return proto.CompactTextString(m) }
func (*AppendEntriesReply) ProtoMessage()    {}
func (*AppendEntriesReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{10}
}

func (m *AppendEntriesReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppendEntriesReply.Unmarshal(m, b)
}
func (m *AppendEntriesReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppendEntriesReply.Marshal(b, m, deterministic)
}
func (m *AppendEntriesReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendEntriesReply.Merge(m, src)
}
func (m *AppendEntriesReply) XXX_Size() int {
	return xxx_messageInfo_AppendEntriesReply.Size(m)
}
func (m *AppendEntriesReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendEntriesReply.DiscardUnknown(m)
}

var xxx_messageInfo_AppendEntriesReply proto.InternalMessageInfo

func (m *AppendEntriesReply) GetFrom() int32 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *AppendEntriesReply) GetTo() int32 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *AppendEntriesReply) GetTerm() int32 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *AppendEntriesReply) GetMatchIndex() int32 {
	if m != nil {
		return m.MatchIndex
	}
	return 0
}

type SetElectionTimeoutArgs struct {
	Timeout              int32    `protobuf:"varint,1,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetElectionTimeoutArgs) Reset()         { *m = SetElectionTimeoutArgs{} }
func (m *SetElectionTimeoutArgs) String() string { return proto.CompactTextString(m) }
func (*SetElectionTimeoutArgs) ProtoMessage()    {}
func (*SetElectionTimeoutArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{11}
}

func (m *SetElectionTimeoutArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetElectionTimeoutArgs.Unmarshal(m, b)
}
func (m *SetElectionTimeoutArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetElectionTimeoutArgs.Marshal(b, m, deterministic)
}
func (m *SetElectionTimeoutArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetElectionTimeoutArgs.Merge(m, src)
}
func (m *SetElectionTimeoutArgs) XXX_Size() int {
	return xxx_messageInfo_SetElectionTimeoutArgs.Size(m)
}
func (m *SetElectionTimeoutArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_SetElectionTimeoutArgs.DiscardUnknown(m)
}

var xxx_messageInfo_SetElectionTimeoutArgs proto.InternalMessageInfo

func (m *SetElectionTimeoutArgs) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

type SetElectionTimeoutReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetElectionTimeoutReply) Reset()         { *m = SetElectionTimeoutReply{} }
func (m *SetElectionTimeoutReply) String() string { return proto.CompactTextString(m) }
func (*SetElectionTimeoutReply) ProtoMessage()    {}
func (*SetElectionTimeoutReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{12}
}

func (m *SetElectionTimeoutReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetElectionTimeoutReply.Unmarshal(m, b)
}
func (m *SetElectionTimeoutReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetElectionTimeoutReply.Marshal(b, m, deterministic)
}
func (m *SetElectionTimeoutReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetElectionTimeoutReply.Merge(m, src)
}
func (m *SetElectionTimeoutReply) XXX_Size() int {
	return xxx_messageInfo_SetElectionTimeoutReply.Size(m)
}
func (m *SetElectionTimeoutReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SetElectionTimeoutReply.DiscardUnknown(m)
}

var xxx_messageInfo_SetElectionTimeoutReply proto.InternalMessageInfo

type SetHeartBeatIntervalArgs struct {
	Interval             int32    `protobuf:"varint,1,opt,name=Interval,proto3" json:"Interval,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetHeartBeatIntervalArgs) Reset()         { *m = SetHeartBeatIntervalArgs{} }
func (m *SetHeartBeatIntervalArgs) String() string { return proto.CompactTextString(m) }
func (*SetHeartBeatIntervalArgs) ProtoMessage()    {}
func (*SetHeartBeatIntervalArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{13}
}

func (m *SetHeartBeatIntervalArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetHeartBeatIntervalArgs.Unmarshal(m, b)
}
func (m *SetHeartBeatIntervalArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetHeartBeatIntervalArgs.Marshal(b, m, deterministic)
}
func (m *SetHeartBeatIntervalArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetHeartBeatIntervalArgs.Merge(m, src)
}
func (m *SetHeartBeatIntervalArgs) XXX_Size() int {
	return xxx_messageInfo_SetHeartBeatIntervalArgs.Size(m)
}
func (m *SetHeartBeatIntervalArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_SetHeartBeatIntervalArgs.DiscardUnknown(m)
}

var xxx_messageInfo_SetHeartBeatIntervalArgs proto.InternalMessageInfo

func (m *SetHeartBeatIntervalArgs) GetInterval() int32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

type SetHeartBeatIntervalReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetHeartBeatIntervalReply) Reset()         { *m = SetHeartBeatIntervalReply{} }
func (m *SetHeartBeatIntervalReply) String() string { return proto.CompactTextString(m) }
func (*SetHeartBeatIntervalReply) ProtoMessage()    {}
func (*SetHeartBeatIntervalReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{14}
}

func (m *SetHeartBeatIntervalReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetHeartBeatIntervalReply.Unmarshal(m, b)
}
func (m *SetHeartBeatIntervalReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetHeartBeatIntervalReply.Marshal(b, m, deterministic)
}
func (m *SetHeartBeatIntervalReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetHeartBeatIntervalReply.Merge(m, src)
}
func (m *SetHeartBeatIntervalReply) XXX_Size() int {
	return xxx_messageInfo_SetHeartBeatIntervalReply.Size(m)
}
func (m *SetHeartBeatIntervalReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SetHeartBeatIntervalReply.DiscardUnknown(m)
}

var xxx_messageInfo_SetHeartBeatIntervalReply proto.InternalMessageInfo

type Event struct {
	Msg                  MsgName     `protobuf:"varint,1,opt,name=Msg,proto3,enum=raft.MsgName" json:"Msg,omitempty"`
	From                 int32       `protobuf:"varint,2,opt,name=From,proto3" json:"From,omitempty"`
	To                   int32       `protobuf:"varint,3,opt,name=To,proto3" json:"To,omitempty"`
	Term                 int32       `protobuf:"varint,4,opt,name=Term,proto3" json:"Term,omitempty"`
	CandidateId          int32       `protobuf:"varint,5,opt,name=CandidateId,proto3" json:"CandidateId,omitempty"`
	LastLogIndex         int32       `protobuf:"varint,6,opt,name=LastLogIndex,proto3" json:"LastLogIndex,omitempty"`
	LastLogTerm          int32       `protobuf:"varint,7,opt,name=LastLogTerm,proto3" json:"LastLogTerm,omitempty"`
	VoteGranted          bool        `protobuf:"varint,8,opt,name=VoteGranted,proto3" json:"VoteGranted,omitempty"`
	LeaderId             int32       `protobuf:"varint,9,opt,name=LeaderId,proto3" json:"LeaderId,omitempty"`
	PrevLogIndex         int32       `protobuf:"varint,10,opt,name=PrevLogIndex,proto3" json:"PrevLogIndex,omitempty"`
	PrevLogTerm          int32       `protobuf:"varint,11,opt,name=PrevLogTerm,proto3" json:"PrevLogTerm,omitempty"`
	Entries              []*LogEntry `protobuf:"bytes,12,rep,name=Entries,proto3" json:"Entries,omitempty"`
	LeaderCommit         int32       `protobuf:"varint,13,opt,name=LeaderCommit,proto3" json:"LeaderCommit,omitempty"`
	Success              bool        `protobuf:"varint,14,opt,name=Success,proto3" json:"Success,omitempty"`
	MatchIndex           int32       `protobuf:"varint,15,opt,name=MatchIndex,proto3" json:"MatchIndex,omitempty"`
	IsResponse           bool        `protobuf:"varint,16,opt,name=IsResponse,proto3" json:"IsResponse,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{15}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetMsg() MsgName {
	if m != nil {
		return m.Msg
	}
	return MsgName_RequestVote
}

func (m *Event) GetFrom() int32 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *Event) GetTo() int32 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *Event) GetTerm() int32 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *Event) GetCandidateId() int32 {
	if m != nil {
		return m.CandidateId
	}
	return 0
}

func (m *Event) GetLastLogIndex() int32 {
	if m != nil {
		return m.LastLogIndex
	}
	return 0
}

func (m *Event) GetLastLogTerm() int32 {
	if m != nil {
		return m.LastLogTerm
	}
	return 0
}

func (m *Event) GetVoteGranted() bool {
	if m != nil {
		return m.VoteGranted
	}
	return false
}

func (m *Event) GetLeaderId() int32 {
	if m != nil {
		return m.LeaderId
	}
	return 0
}

func (m *Event) GetPrevLogIndex() int32 {
	if m != nil {
		return m.PrevLogIndex
	}
	return 0
}

func (m *Event) GetPrevLogTerm() int32 {
	if m != nil {
		return m.PrevLogTerm
	}
	return 0
}

func (m *Event) GetEntries() []*LogEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *Event) GetLeaderCommit() int32 {
	if m != nil {
		return m.LeaderCommit
	}
	return 0
}

func (m *Event) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *Event) GetMatchIndex() int32 {
	if m != nil {
		return m.MatchIndex
	}
	return 0
}

func (m *Event) GetIsResponse() bool {
	if m != nil {
		return m.IsResponse
	}
	return false
}

func init() {
	proto.RegisterEnum("raft.Role", Role_name, Role_value)
	proto.RegisterEnum("raft.Operation", Operation_name, Operation_value)
	proto.RegisterEnum("raft.Status", Status_name, Status_value)
	proto.RegisterEnum("raft.MsgName", MsgName_name, MsgName_value)
	proto.RegisterType((*CheckEventsArgs)(nil), "raft.CheckEventsArgs")
	proto.RegisterMapType((map[string]int32)(nil), "raft.CheckEventsArgs.AppendEntriesSchemaEntry")
	proto.RegisterMapType((map[string]int32)(nil), "raft.CheckEventsArgs.RequestVoteSchemaEntry")
	proto.RegisterType((*CheckEventsReply)(nil), "raft.CheckEventsReply")
	proto.RegisterType((*ProposeArgs)(nil), "raft.ProposeArgs")
	proto.RegisterType((*ProposeReply)(nil), "raft.ProposeReply")
	proto.RegisterType((*GetValueArgs)(nil), "raft.GetValueArgs")
	proto.RegisterType((*GetValueReply)(nil), "raft.GetValueReply")
	proto.RegisterType((*LogEntry)(nil), "raft.LogEntry")
	proto.RegisterType((*RequestVoteArgs)(nil), "raft.RequestVoteArgs")
	proto.RegisterType((*RequestVoteReply)(nil), "raft.RequestVoteReply")
	proto.RegisterType((*AppendEntriesArgs)(nil), "raft.AppendEntriesArgs")
	proto.RegisterType((*AppendEntriesReply)(nil), "raft.AppendEntriesReply")
	proto.RegisterType((*SetElectionTimeoutArgs)(nil), "raft.SetElectionTimeoutArgs")
	proto.RegisterType((*SetElectionTimeoutReply)(nil), "raft.SetElectionTimeoutReply")
	proto.RegisterType((*SetHeartBeatIntervalArgs)(nil), "raft.SetHeartBeatIntervalArgs")
	proto.RegisterType((*SetHeartBeatIntervalReply)(nil), "raft.SetHeartBeatIntervalReply")
	proto.RegisterType((*Event)(nil), "raft.Event")
}

func init() { proto.RegisterFile("raft.proto", fileDescriptor_b042552c306ae59b) }

var fileDescriptor_b042552c306ae59b = []byte{
	// 1016 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xdb, 0x6e, 0xdb, 0x46,
	0x10, 0x35, 0x49, 0x5d, 0xe8, 0xd1, 0xc5, 0xf4, 0x26, 0x75, 0x18, 0xb6, 0x8d, 0x05, 0x22, 0x0f,
	0x86, 0xd1, 0xba, 0x85, 0x0d, 0x14, 0x45, 0x51, 0x14, 0x48, 0x64, 0x39, 0x35, 0xe4, 0x5b, 0x29,
	0xc3, 0x01, 0xf2, 0x54, 0x56, 0x9a, 0xc8, 0x42, 0x24, 0x2e, 0x4b, 0xae, 0xdc, 0xe8, 0x07, 0xfa,
	0x01, 0xfd, 0x93, 0x7e, 0x50, 0xff, 0xa2, 0x6f, 0x7d, 0x29, 0xf6, 0x42, 0x66, 0x29, 0xca, 0x76,
	0x02, 0xbf, 0x71, 0x66, 0x67, 0xce, 0x9e, 0x3d, 0x3b, 0x33, 0x4b, 0x80, 0x24, 0x7c, 0xcb, 0xf6,
	0xe2, 0x84, 0x32, 0x4a, 0x2a, 0xfc, 0xdb, 0xff, 0xcb, 0x82, 0x8d, 0xee, 0x35, 0x0e, 0xdf, 0xf5,
	0x6e, 0x30, 0x62, 0xe9, 0x8b, 0x64, 0x9c, 0x92, 0x37, 0xb0, 0x19, 0xe0, 0xef, 0x73, 0x4c, 0xd9,
	0x15, 0x65, 0x38, 0x18, 0x5e, 0xe3, 0x2c, 0x74, 0x8d, 0x8e, 0xb5, 0xd3, 0xd8, 0xff, 0x6a, 0x4f,
	0x20, 0x2c, 0x65, 0xec, 0x95, 0xc2, 0x7b, 0x11, 0x4b, 0x16, 0x41, 0x19, 0x86, 0xfc, 0x0a, 0x8f,
	0x5e, 0xc4, 0x31, 0x46, 0x23, 0x1e, 0x31, 0xc1, 0x54, 0xa1, 0x9b, 0x02, 0x7d, 0x6f, 0x35, 0xfa,
	0x8a, 0x04, 0x89, 0xbf, 0x0a, 0x8a, 0x1c, 0x40, 0xbb, 0xf7, 0x3e, 0xc6, 0x21, 0xc3, 0x91, 0xc4,
	0x70, 0x2d, 0x01, 0xde, 0x90, 0xe0, 0xc2, 0x17, 0x2c, 0x85, 0x78, 0x87, 0xb0, 0xb5, 0xfa, 0x0c,
	0xc4, 0x01, 0xeb, 0x1d, 0x2e, 0x5c, 0xa3, 0x63, 0xec, 0xac, 0x07, 0xfc, 0x93, 0x3c, 0x86, 0xea,
	0x4d, 0x38, 0x9d, 0xa3, 0x6b, 0x76, 0x8c, 0x9d, 0x6a, 0x20, 0x8d, 0x1f, 0xcc, 0xef, 0x0d, 0xef,
	0x08, 0xdc, 0xdb, 0xb8, 0x7e, 0x0a, 0x8e, 0x7f, 0x08, 0x8e, 0xa6, 0x41, 0x80, 0xf1, 0x74, 0x41,
	0x5c, 0xa8, 0x0f, 0xe6, 0xc3, 0x21, 0xa6, 0xa9, 0xc0, 0xb0, 0x83, 0xcc, 0x24, 0x5b, 0x50, 0xeb,
	0x25, 0xc9, 0x69, 0x3a, 0x16, 0x40, 0xeb, 0x81, 0xb2, 0xfc, 0x33, 0x68, 0x5c, 0x24, 0x34, 0xa6,
	0x29, 0x8a, 0x5b, 0xdd, 0x06, 0xf3, 0x3c, 0x16, 0xb9, 0xed, 0xfd, 0x0d, 0xa9, 0xc5, 0x79, 0x8c,
	0x49, 0xc8, 0x26, 0x34, 0x0a, 0xcc, 0xf3, 0x38, 0x63, 0x68, 0x7e, 0x60, 0xd8, 0x04, 0xe3, 0xca,
	0xb5, 0x04, 0x3b, 0xe3, 0xca, 0x7f, 0x03, 0x4d, 0x85, 0x27, 0x19, 0x3d, 0x87, 0x56, 0x77, 0x9e,
	0x24, 0x18, 0xb1, 0x13, 0x0c, 0x47, 0x98, 0x08, 0xec, 0x6a, 0x50, 0x74, 0x92, 0xe7, 0x50, 0x1b,
	0xb0, 0x90, 0xcd, 0x53, 0x01, 0xdc, 0xde, 0x6f, 0xca, 0xad, 0xa5, 0x2f, 0x50, 0x6b, 0x7e, 0x07,
	0x9a, 0xaf, 0x90, 0x5d, 0x71, 0x05, 0x04, 0x59, 0x07, 0xac, 0xfe, 0x07, 0xb5, 0xfa, 0xb8, 0xf0,
	0xbb, 0xd0, 0xca, 0x22, 0xe4, 0xf6, 0x82, 0x9c, 0xa1, 0xc8, 0x7d, 0xe4, 0x36, 0x63, 0xb0, 0x4f,
	0xe8, 0x58, 0x5e, 0x08, 0x81, 0xca, 0x25, 0x26, 0x33, 0x05, 0x21, 0xbe, 0x95, 0x46, 0xe6, 0x9d,
	0x1a, 0x71, 0x5e, 0x56, 0xce, 0x8b, 0xdf, 0xa2, 0x20, 0xe5, 0x56, 0xe4, 0x2d, 0x0a, 0xc3, 0xff,
	0xdb, 0x80, 0x0d, 0xad, 0xa0, 0xc4, 0x99, 0x08, 0x54, 0x8e, 0x12, 0x9a, 0x6f, 0xc8, 0xbf, 0x49,
	0x1b, 0xcc, 0x4b, 0xaa, 0x0a, 0xc0, 0xbc, 0xa4, 0x39, 0x29, 0x4b, 0x23, 0xd5, 0x81, 0x46, 0x37,
	0x8c, 0x46, 0x93, 0x51, 0xc8, 0xf0, 0x78, 0xa4, 0xf6, 0xd1, 0x5d, 0xc4, 0x87, 0xe6, 0x49, 0x98,
	0xb2, 0x13, 0x3a, 0x3e, 0x8e, 0x46, 0xf8, 0xde, 0xad, 0x8a, 0x90, 0x82, 0x8f, 0xa3, 0x28, 0x5b,
	0x6c, 0x50, 0x93, 0x28, 0x9a, 0xcb, 0x9f, 0x82, 0xa3, 0x51, 0x96, 0x22, 0x3f, 0x80, 0x33, 0x07,
	0x79, 0x95, 0x84, 0x11, 0x43, 0xc9, 0xd9, 0x0e, 0x74, 0x97, 0xff, 0x9f, 0x01, 0x9b, 0x85, 0x66,
	0x79, 0x90, 0x46, 0x1e, 0xd8, 0xb2, 0xde, 0x72, 0x81, 0x72, 0x9b, 0xab, 0x73, 0x91, 0xe0, 0xcd,
	0xb2, 0x3a, 0xba, 0x8f, 0xf3, 0x55, 0xb6, 0xae, 0x8e, 0xe6, 0x22, 0x3b, 0x50, 0x57, 0x44, 0xdd,
	0xba, 0x98, 0x27, 0x6d, 0x59, 0x1f, 0x59, 0x3d, 0x05, 0xd9, 0xb2, 0xb8, 0x0d, 0xb1, 0x77, 0x97,
	0xce, 0x66, 0x13, 0xe6, 0xda, 0xea, 0x36, 0x34, 0x9f, 0xff, 0xa7, 0x01, 0xa4, 0x70, 0xfa, 0x87,
	0xc9, 0xad, 0x0d, 0x87, 0x4a, 0x71, 0x38, 0x3c, 0x03, 0x38, 0x0d, 0xd9, 0xf0, 0x5a, 0x3f, 0xba,
	0xe6, 0xf1, 0xf7, 0x61, 0x6b, 0x80, 0xac, 0x37, 0xc5, 0x21, 0xaf, 0xf1, 0xcb, 0xc9, 0x0c, 0xe9,
	0x9c, 0x89, 0xab, 0x70, 0xa1, 0xae, 0x4c, 0x45, 0x27, 0x33, 0xfd, 0xa7, 0xf0, 0xa4, 0x9c, 0x23,
	0x0e, 0xe0, 0x7f, 0x07, 0xee, 0x00, 0xd9, 0xcf, 0x18, 0x26, 0xec, 0x25, 0x86, 0xec, 0x38, 0x62,
	0x98, 0xdc, 0x84, 0x53, 0x01, 0xe8, 0x81, 0x9d, 0xd9, 0x0a, 0x31, 0xb7, 0xfd, 0xcf, 0xe1, 0xe9,
	0xaa, 0x3c, 0x09, 0xfa, 0xaf, 0x05, 0x55, 0x31, 0x0a, 0xc9, 0x36, 0x58, 0x7c, 0xce, 0xc9, 0x21,
	0xd6, 0x92, 0x17, 0x70, 0x9a, 0x8e, 0xcf, 0xc2, 0x19, 0x06, 0x7c, 0x25, 0x17, 0xd0, 0x2c, 0x09,
	0x68, 0x95, 0x04, 0xac, 0xdc, 0xde, 0x63, 0xd5, 0xfb, 0x7b, 0xac, 0x76, 0x7f, 0x8f, 0xd5, 0x4b,
	0x3d, 0xb6, 0xdc, 0x17, 0x76, 0xa9, 0x2f, 0x0a, 0x95, 0xbc, 0x7e, 0x4f, 0x25, 0xc3, 0xfd, 0x95,
	0xdc, 0xb8, 0xb3, 0x92, 0x9b, 0x9f, 0x56, 0xc9, 0xad, 0x72, 0x25, 0xeb, 0xa5, 0xd7, 0xbe, 0xab,
	0xf4, 0x36, 0x96, 0x4b, 0x8f, 0xaf, 0x1f, 0xa7, 0x01, 0xa6, 0x31, 0x8d, 0x52, 0x74, 0x1d, 0x91,
	0xac, 0x79, 0x76, 0xbf, 0x81, 0x4a, 0x40, 0xa7, 0x48, 0x9a, 0x60, 0x1f, 0xd1, 0xe9, 0x94, 0xfe,
	0x81, 0x89, 0xb3, 0x46, 0x5a, 0xb0, 0x9e, 0x5f, 0x8b, 0x63, 0x10, 0x80, 0x9a, 0xa4, 0xe3, 0x98,
	0xbb, 0x1d, 0x58, 0xcf, 0xa7, 0x35, 0xa9, 0x83, 0x75, 0x31, 0x67, 0xce, 0x1a, 0x8f, 0x38, 0xc4,
	0x29, 0xf2, 0xe8, 0xdd, 0x9f, 0xb2, 0x57, 0x82, 0xd4, 0xc0, 0x3c, 0xef, 0x3b, 0x6b, 0x1c, 0xbc,
	0x8f, 0x8b, 0x23, 0x3a, 0x8f, 0x46, 0x8e, 0x41, 0x36, 0xa0, 0xd1, 0xc7, 0xc5, 0x19, 0x65, 0xd2,
	0x61, 0xf2, 0xdd, 0x5e, 0x27, 0x34, 0x1a, 0x9f, 0xd1, 0x11, 0x3a, 0xd6, 0xee, 0xd7, 0x50, 0x57,
	0xe5, 0xc6, 0x43, 0xb5, 0x69, 0xe9, 0xac, 0x91, 0x4d, 0x68, 0x15, 0x3a, 0xda, 0x31, 0xf6, 0xff,
	0xb1, 0xc0, 0x0e, 0xc2, 0xb7, 0x8c, 0x67, 0x93, 0x6f, 0xa1, 0xae, 0x9e, 0x4f, 0xb2, 0x29, 0x05,
	0xd7, 0x5e, 0x67, 0x8f, 0x14, 0x5c, 0x72, 0x1a, 0x1c, 0x80, 0x9d, 0x3d, 0x79, 0x44, 0xad, 0xeb,
	0x8f, 0xa4, 0xf7, 0xa8, 0xe8, 0x93, 0x49, 0xbf, 0x00, 0x29, 0x37, 0x27, 0xf9, 0x42, 0x3d, 0x87,
	0x2b, 0x5b, 0xdd, 0xfb, 0xf2, 0xb6, 0x55, 0x09, 0xf9, 0x1a, 0x1e, 0xaf, 0x6a, 0x4e, 0xf2, 0x2c,
	0x4f, 0x5b, 0xd9, 0xf0, 0xde, 0xf6, 0xed, 0xeb, 0x12, 0xf8, 0xc7, 0x82, 0x86, 0xe4, 0x33, 0x19,
	0xbf, 0xf4, 0x6e, 0x7a, 0x5b, 0x25, 0xb7, 0xcc, 0x7e, 0xb9, 0x24, 0x38, 0x79, 0x22, 0x03, 0x4b,
	0xaf, 0x8a, 0xe7, 0xae, 0x58, 0xc8, 0x19, 0x68, 0x7f, 0x5a, 0x19, 0x83, 0xa5, 0x1f, 0xd0, 0x8c,
	0xc1, 0xf2, 0x3f, 0xd9, 0x6f, 0x35, 0xf1, 0x27, 0x7d, 0xf0, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xc7, 0xfe, 0xf6, 0x43, 0x57, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RaftNodeClient is the client API for RaftNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RaftNodeClient interface {
	// Desc:
	// Propose initializes proposing a new operation, and replies with the
	// result of committing this operation. Propose should not return until
	// this operation has been committed, or this node is not leader now.
	//
	// If the we put a new <k, v> pair or deleted an existing <k, v> pair
	// successfully, it should return OK; If it tries to delete an non-existing
	// key, a KeyNotFound should be returned; If this node is not leader now,
	// it should return WrongNode as well as the currentLeader id.
	//
	// Params:
	// args: the operation to propose
	// reply: as specified in Desc
	Propose(ctx context.Context, in *ProposeArgs, opts ...grpc.CallOption) (*ProposeReply, error)
	// Desc:GetValue
	// GetValue looks up the value for a key, and replies with the value or with
	// the Status KeyNotFound.
	//
	// Params:
	// args: the key to check
	// reply: the value and status for this lookup of the given key
	GetValue(ctx context.Context, in *GetValueArgs, opts ...grpc.CallOption) (*GetValueReply, error)
	// Desc:
	// Set both the the electionTimeoutLow and electionTimeoutHigh of this node to be args.Timeout.
	// You also need to stop current timer and reset it to fire after args.Timeout milliseconds.
	//
	// Params:
	// args: the election timeout duration
	// reply: no use
	SetElectionTimeout(ctx context.Context, in *SetElectionTimeoutArgs, opts ...grpc.CallOption) (*SetElectionTimeoutReply, error)
	// Desc:
	// Set heartBeatInterval as args.Interval milliseconds.
	// You also need to stop current ticker and reset it to fire every args.Interval milliseconds.
	//
	// Params:
	// args: the heartbeat duration
	// reply: no use
	SetHeartBeatInterval(ctx context.Context, in *SetHeartBeatIntervalArgs, opts ...grpc.CallOption) (*SetHeartBeatIntervalReply, error)
	// Desc:
	// Receive a RequestVote message from another Raft Node. Check the paper for more details.
	//
	// Params:
	// args: the RequestVote Message, you must include From(src node id) and To(dst node id) when
	// you call this API
	//
	// Return:
	// reply: the RequestVote Reply Message
	RequestVote(ctx context.Context, in *RequestVoteArgs, opts ...grpc.CallOption) (*RequestVoteReply, error)
	// Desc:
	// Receive a AppendEntries message from another Raft Node. Check the paper for more details.
	//
	// Params:
	// args: the AppendEntries M/essage, you must include From(src node id) and To(dst node id) when
	// you call this API
	// reply: the AppendEntries Reply Message
	AppendEntries(ctx context.Context, in *AppendEntriesArgs, opts ...grpc.CallOption) (*AppendEntriesReply, error)
	// Desc:
	// For testing purpose only. You should implement it and reply nil directly,
	CheckEvents(ctx context.Context, in *CheckEventsArgs, opts ...grpc.CallOption) (*CheckEventsReply, error)
}

type raftNodeClient struct {
	cc *grpc.ClientConn
}

func NewRaftNodeClient(cc *grpc.ClientConn) RaftNodeClient {
	return &raftNodeClient{cc}
}

func (c *raftNodeClient) Propose(ctx context.Context, in *ProposeArgs, opts ...grpc.CallOption) (*ProposeReply, error) {
	out := new(ProposeReply)
	err := c.cc.Invoke(ctx, "/raft.RaftNode/Propose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftNodeClient) GetValue(ctx context.Context, in *GetValueArgs, opts ...grpc.CallOption) (*GetValueReply, error) {
	out := new(GetValueReply)
	err := c.cc.Invoke(ctx, "/raft.RaftNode/GetValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftNodeClient) SetElectionTimeout(ctx context.Context, in *SetElectionTimeoutArgs, opts ...grpc.CallOption) (*SetElectionTimeoutReply, error) {
	out := new(SetElectionTimeoutReply)
	err := c.cc.Invoke(ctx, "/raft.RaftNode/SetElectionTimeout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftNodeClient) SetHeartBeatInterval(ctx context.Context, in *SetHeartBeatIntervalArgs, opts ...grpc.CallOption) (*SetHeartBeatIntervalReply, error) {
	out := new(SetHeartBeatIntervalReply)
	err := c.cc.Invoke(ctx, "/raft.RaftNode/SetHeartBeatInterval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftNodeClient) RequestVote(ctx context.Context, in *RequestVoteArgs, opts ...grpc.CallOption) (*RequestVoteReply, error) {
	out := new(RequestVoteReply)
	err := c.cc.Invoke(ctx, "/raft.RaftNode/RequestVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftNodeClient) AppendEntries(ctx context.Context, in *AppendEntriesArgs, opts ...grpc.CallOption) (*AppendEntriesReply, error) {
	out := new(AppendEntriesReply)
	err := c.cc.Invoke(ctx, "/raft.RaftNode/AppendEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftNodeClient) CheckEvents(ctx context.Context, in *CheckEventsArgs, opts ...grpc.CallOption) (*CheckEventsReply, error) {
	out := new(CheckEventsReply)
	err := c.cc.Invoke(ctx, "/raft.RaftNode/CheckEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftNodeServer is the server API for RaftNode service.
type RaftNodeServer interface {
	// Desc:
	// Propose initializes proposing a new operation, and replies with the
	// result of committing this operation. Propose should not return until
	// this operation has been committed, or this node is not leader now.
	//
	// If the we put a new <k, v> pair or deleted an existing <k, v> pair
	// successfully, it should return OK; If it tries to delete an non-existing
	// key, a KeyNotFound should be returned; If this node is not leader now,
	// it should return WrongNode as well as the currentLeader id.
	//
	// Params:
	// args: the operation to propose
	// reply: as specified in Desc
	Propose(context.Context, *ProposeArgs) (*ProposeReply, error)
	// Desc:GetValue
	// GetValue looks up the value for a key, and replies with the value or with
	// the Status KeyNotFound.
	//
	// Params:
	// args: the key to check
	// reply: the value and status for this lookup of the given key
	GetValue(context.Context, *GetValueArgs) (*GetValueReply, error)
	// Desc:
	// Set both the the electionTimeoutLow and electionTimeoutHigh of this node to be args.Timeout.
	// You also need to stop current timer and reset it to fire after args.Timeout milliseconds.
	//
	// Params:
	// args: the election timeout duration
	// reply: no use
	SetElectionTimeout(context.Context, *SetElectionTimeoutArgs) (*SetElectionTimeoutReply, error)
	// Desc:
	// Set heartBeatInterval as args.Interval milliseconds.
	// You also need to stop current ticker and reset it to fire every args.Interval milliseconds.
	//
	// Params:
	// args: the heartbeat duration
	// reply: no use
	SetHeartBeatInterval(context.Context, *SetHeartBeatIntervalArgs) (*SetHeartBeatIntervalReply, error)
	// Desc:
	// Receive a RequestVote message from another Raft Node. Check the paper for more details.
	//
	// Params:
	// args: the RequestVote Message, you must include From(src node id) and To(dst node id) when
	// you call this API
	//
	// Return:
	// reply: the RequestVote Reply Message
	RequestVote(context.Context, *RequestVoteArgs) (*RequestVoteReply, error)
	// Desc:
	// Receive a AppendEntries message from another Raft Node. Check the paper for more details.
	//
	// Params:
	// args: the AppendEntries M/essage, you must include From(src node id) and To(dst node id) when
	// you call this API
	// reply: the AppendEntries Reply Message
	AppendEntries(context.Context, *AppendEntriesArgs) (*AppendEntriesReply, error)
	// Desc:
	// For testing purpose only. You should implement it and reply nil directly,
	CheckEvents(context.Context, *CheckEventsArgs) (*CheckEventsReply, error)
}

// UnimplementedRaftNodeServer can be embedded to have forward compatible implementations.
type UnimplementedRaftNodeServer struct {
}

func (*UnimplementedRaftNodeServer) Propose(ctx context.Context, req *ProposeArgs) (*ProposeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Propose not implemented")
}
func (*UnimplementedRaftNodeServer) GetValue(ctx context.Context, req *GetValueArgs) (*GetValueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValue not implemented")
}
func (*UnimplementedRaftNodeServer) SetElectionTimeout(ctx context.Context, req *SetElectionTimeoutArgs) (*SetElectionTimeoutReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetElectionTimeout not implemented")
}
func (*UnimplementedRaftNodeServer) SetHeartBeatInterval(ctx context.Context, req *SetHeartBeatIntervalArgs) (*SetHeartBeatIntervalReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHeartBeatInterval not implemented")
}
func (*UnimplementedRaftNodeServer) RequestVote(ctx context.Context, req *RequestVoteArgs) (*RequestVoteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVote not implemented")
}
func (*UnimplementedRaftNodeServer) AppendEntries(ctx context.Context, req *AppendEntriesArgs) (*AppendEntriesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendEntries not implemented")
}
func (*UnimplementedRaftNodeServer) CheckEvents(ctx context.Context, req *CheckEventsArgs) (*CheckEventsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckEvents not implemented")
}

func RegisterRaftNodeServer(s *grpc.Server, srv RaftNodeServer) {
	s.RegisterService(&_RaftNode_serviceDesc, srv)
}

func _RaftNode_Propose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposeArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftNodeServer).Propose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.RaftNode/Propose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftNodeServer).Propose(ctx, req.(*ProposeArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftNode_GetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValueArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftNodeServer).GetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.RaftNode/GetValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftNodeServer).GetValue(ctx, req.(*GetValueArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftNode_SetElectionTimeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetElectionTimeoutArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftNodeServer).SetElectionTimeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.RaftNode/SetElectionTimeout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftNodeServer).SetElectionTimeout(ctx, req.(*SetElectionTimeoutArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftNode_SetHeartBeatInterval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetHeartBeatIntervalArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftNodeServer).SetHeartBeatInterval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.RaftNode/SetHeartBeatInterval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftNodeServer).SetHeartBeatInterval(ctx, req.(*SetHeartBeatIntervalArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftNode_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVoteArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftNodeServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.RaftNode/RequestVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftNodeServer).RequestVote(ctx, req.(*RequestVoteArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftNode_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftNodeServer).AppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.RaftNode/AppendEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftNodeServer).AppendEntries(ctx, req.(*AppendEntriesArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftNode_CheckEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckEventsArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftNodeServer).CheckEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.RaftNode/CheckEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftNodeServer).CheckEvents(ctx, req.(*CheckEventsArgs))
	}
	return interceptor(ctx, in, info, handler)
}

var _RaftNode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "raft.RaftNode",
	HandlerType: (*RaftNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Propose",
			Handler:    _RaftNode_Propose_Handler,
		},
		{
			MethodName: "GetValue",
			Handler:    _RaftNode_GetValue_Handler,
		},
		{
			MethodName: "SetElectionTimeout",
			Handler:    _RaftNode_SetElectionTimeout_Handler,
		},
		{
			MethodName: "SetHeartBeatInterval",
			Handler:    _RaftNode_SetHeartBeatInterval_Handler,
		},
		{
			MethodName: "RequestVote",
			Handler:    _RaftNode_RequestVote_Handler,
		},
		{
			MethodName: "AppendEntries",
			Handler:    _RaftNode_AppendEntries_Handler,
		},
		{
			MethodName: "CheckEvents",
			Handler:    _RaftNode_CheckEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raft.proto",
}
